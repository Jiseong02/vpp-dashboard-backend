name: Docker Image CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Convert gradlew to Unix format
        run: sed -i 's/\r$//' gradlew
        
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Verify gradlew exists
        run: ls -al

      - name: Check gradlew file type
        run: file gradlew
        
      - name: Build JAR file
        run: ./gradlew build

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}:latest .

      - name: Push Docker Image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}:latest

  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo ${{ secrets.SERVER_PASSWORD }} | sudo -S docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}:latest
            echo ${{ secrets.SERVER_PASSWORD }} | sudo -S docker stop vpp-dashboard || true
            echo ${{ secrets.SERVER_PASSWORD }} | sudo -S docker rm vpp-dashboard || true
            echo ${{ secrets.SERVER_PASSWORD }} | sudo -S docker run -d -v /home/ubuntu/images:/vpp-dashboard/images --name vpp-dashboard -p 8000:8000 ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}:latest
            echo ${{ secrets.SERVER_PASSWORD }} | sudo -S docker system prune -af
